name: Build Release Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v0.1.0)"
        required: true
        default: "v0.1.0"
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: app.exe
            artifact_name: fonketh-windows-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: app
            artifact_name: fonketh-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: app
            artifact_name: fonketh-macos-aarch64

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross-compilation targets
        run: |
          rustup target add ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin app --features game_core/interface

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release | Out-Null
          Copy-Item target\${{ matrix.target }}\release\${{ matrix.binary_name }} release\

      - name: Prepare artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.binary_name }}
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Rename artifacts with unique names
        shell: bash
        run: |
          mkdir -p release-binaries
          if [ -f "artifacts/fonketh-windows-x86_64/app.exe" ]; then
            cp artifacts/fonketh-windows-x86_64/app.exe release-binaries/fonketh-windows-x86_64.exe
          fi
          if [ -f "artifacts/fonketh-macos-x86_64/app" ]; then
            cp artifacts/fonketh-macos-x86_64/app release-binaries/fonketh-macos-x86_64
            chmod +x release-binaries/fonketh-macos-x86_64
          fi
          if [ -f "artifacts/fonketh-macos-aarch64/app" ]; then
            cp artifacts/fonketh-macos-aarch64/app release-binaries/fonketh-macos-aarch64
            chmod +x release-binaries/fonketh-macos-aarch64
          fi

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release-binaries/fonketh-windows-x86_64.exe
            release-binaries/fonketh-macos-x86_64
            release-binaries/fonketh-macos-aarch64
          generate_release_notes: false
